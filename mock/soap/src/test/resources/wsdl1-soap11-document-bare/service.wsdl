<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2023.
  ~
  ~ This file is part of Imposter.
  ~
  ~ "Commons Clause" License Condition v1.0
  ~
  ~ The Software is provided to you by the Licensor under the License, as
  ~ defined below, subject to the following condition.
  ~
  ~ Without limiting other conditions in the License, the grant of rights
  ~ under the License will not include, and the License does not grant to
  ~ you, the right to Sell the Software.
  ~
  ~ For purposes of the foregoing, "Sell" means practicing any or all of
  ~ the rights granted to you under the License to provide to third parties,
  ~ for a fee or other consideration (including without limitation fees for
  ~ hosting or consulting/support services related to the Software), a
  ~ product or service whose value derives, entirely or substantially, from
  ~ the functionality of the Software. Any license notice or attribution
  ~ required by the License must also include this Commons Clause License
  ~ Condition notice.
  ~
  ~ Software: Imposter
  ~
  ~ License: GNU Lesser General Public License version 3
  ~
  ~ Licensor: Peter Cornish
  ~
  ~ Imposter is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ Imposter is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with Imposter.  If not, see <https://www.gnu.org/licenses/>.
  -->

<definitions name="PetService" xmlns="http://schemas.xmlsoap.org/wsdl/"
             xmlns:tns="urn:com:example:petstore"
             xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
             xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
             targetNamespace="urn:com:example:petstore">

    <documentation>
        This is a sample WSDL 1.1 document describing the pet service.
        It has SOAP 1.1 bindings, uses the Document bare style,
        with messages specifying an XML schema element.
    </documentation>

    <!-- Abstract type -->
    <types>
        <!-- imported schema -->
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns="urn:com:example:petstore"
                   targetNamespace="urn:com:example:petstore">

            <xs:import namespace="urn:com:example:petstore"
                       schemaLocation="schema.xsd"/>
        </xs:schema>

        <!-- embedded schema -->
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns="urn:com:example:petstore"
                   targetNamespace="urn:com:example:petstore">

            <xs:simpleType name="petBreedName">
                <xs:restriction base="xs:string">
                    <xs:minLength value="1"/>
                    <xs:maxLength value="20"/>
                </xs:restriction>
            </xs:simpleType>

            <xs:complexType name="petBreed">
                <xs:all>
                    <xs:element name="id" type="xs:int"/>

                    <!--
                    Use the 'tns' prefix defined outside the inline schema
                    to test prefix inheritance for inline schemas.
                    -->
                    <xs:element name="name" type="tns:petBreedName"/>
                </xs:all>
            </xs:complexType>
        </xs:schema>
    </types>

    <message name="getPetByIdRequest">
        <!-- no namespace prefix for the element, so fallback to WSDL targetNamespace -->
        <part element="getPetByIdRequest" name="parameters"/>
    </message>
    <message name="getPetByIdResponse">
        <part element="tns:getPetByIdResponse" name="parameters"/>
    </message>
    <message name="getPetByNameRequest">
        <part element="tns:getPetByNameRequest" name="parameters"/>
    </message>
    <message name="getPetByNameResponse">
        <part element="tns:getPetByNameResponse" name="parameters"/>
    </message>
    <message name="getPetFault">
        <part element="tns:getPetFault" name="parameters"/>
    </message>

    <!-- Abstract port types -->
    <portType name="PetPortType">
        <operation name="getPetById">
            <input message="tns:getPetByIdRequest" name="getPetByIdRequest"/>
            <output message="tns:getPetByIdResponse" name="getPetByIdResponse"/>
            <fault message="tns:getPetFault" name="getPetFault" />
        </operation>
        <operation name="getPetByName">
            <input message="tns:getPetByNameRequest" name="getPetByNameRequest"/>
            <output message="tns:getPetByNameResponse" name="getPetByNameResponse"/>
            <fault message="tns:getPetFault" name="getPetFault" />
        </operation>
    </portType>

    <!-- Concrete Binding Over HTTP -->
    <binding name="HttpBinding" type="tns:PetPortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

        <operation name="getPetById">
            <soap:operation soapAction="getPetById" style="document"/>
            <input name="getPetByIdRequest">
                <soap:body use="literal"/>
            </input>
            <output name="getPetByIdResponse">
                <soap:body use="literal"/>
            </output>
            <fault name="getPetFault">
                <soap:body use="literal"/>
            </fault>
        </operation>
        <operation name="getPetByName">
            <soap:operation soapAction="getPetByName" style="document"/>
            <input name="getPetByNameRequest">
                <soap:body use="literal"/>
            </input>
            <output name="getPetByNameResponse">
                <soap:body use="literal"/>
            </output>
            <fault name="getPetFault">
                <soap:body use="literal"/>
            </fault>
        </operation>
    </binding>

    <!-- Concrete Binding with SOAP-->
    <binding name="SoapBinding" type="tns:PetPortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/soap"/>

        <operation name="getPetById">
            <soap:operation soapAction="getPetById" style="document"/>
            <input name="getPetByIdRequest">
                <soap:body use="literal"/>
            </input>
            <output name="getPetByIdResponse">
                <soap:body use="literal"/>
            </output>
            <fault name="getPetFault">
                <soap:body use="literal"/>
            </fault>
        </operation>

        <operation name="getPetByName">
            <!-- soap:operation style omitted - fall back to soap:binding style -->
            <soap:operation soapAction="getPetByName"/>
            <input name="getPetByNameRequest">
                <soap:body use="literal"/>
            </input>
            <output name="getPetByNameResponse">
                <soap:body use="literal"/>
            </output>
            <fault name="getPetFault">
                <soap:body use="literal"/>
            </fault>
        </operation>
    </binding>

    <!-- Web Service offering endpoints for both bindings-->
    <service name="PetService">
        <port name="HttpEndpoint" binding="tns:HttpBinding">
            <soap:address location="http://www.example.com/http/"/>
        </port>
        <port name="SoapEndpoint" binding="tns:SoapBinding">
            <soap:address location="http://www.example.com/soap/"/>
        </port>
    </service>
</definitions>
