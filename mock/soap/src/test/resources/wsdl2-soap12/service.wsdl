<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2023.
  ~
  ~ This file is part of Imposter.
  ~
  ~ "Commons Clause" License Condition v1.0
  ~
  ~ The Software is provided to you by the Licensor under the License, as
  ~ defined below, subject to the following condition.
  ~
  ~ Without limiting other conditions in the License, the grant of rights
  ~ under the License will not include, and the License does not grant to
  ~ you, the right to Sell the Software.
  ~
  ~ For purposes of the foregoing, "Sell" means practicing any or all of
  ~ the rights granted to you under the License to provide to third parties,
  ~ for a fee or other consideration (including without limitation fees for
  ~ hosting or consulting/support services related to the Software), a
  ~ product or service whose value derives, entirely or substantially, from
  ~ the functionality of the Software. Any license notice or attribution
  ~ required by the License must also include this Commons Clause License
  ~ Condition notice.
  ~
  ~ Software: Imposter
  ~
  ~ License: GNU Lesser General Public License version 3
  ~
  ~ Licensor: Peter Cornish
  ~
  ~ Imposter is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ Imposter is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with Imposter.  If not, see <https://www.gnu.org/licenses/>.
  -->

<description xmlns="http://www.w3.org/ns/wsdl"
             xmlns:tns="urn:com:example:petstore"
             xmlns:whttp="http://www.w3.org/ns/wsdl/http"
             xmlns:wsoap="http://www.w3.org/ns/wsdl/soap"
             targetNamespace="urn:com:example:petstore" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.w3.org/ns/wsdl/http http://www.w3.org/2002/ws/desc/ns/http.xsd
http://www.w3.org/ns/wsdl/soap http://www.w3.org/2002/ws/desc/ns/soap.xsd">

    <documentation>
        This is a sample WSDL 2.0 document describing the pet service.
        It has SOAP 1.2 bindings.
    </documentation>

    <types>
        <!-- imported schema -->
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns="urn:com:example:petstore"
                   targetNamespace="urn:com:example:petstore">

            <xs:import namespace="urn:com:example:petstore"
                       schemaLocation="schema.xsd"/>
        </xs:schema>

        <!-- embedded schema -->
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns="urn:com:example:petstore"
                   targetNamespace="urn:com:example:petstore">

            <xs:simpleType name="petBreedName">
                <xs:restriction base="xs:string">
                    <xs:minLength value="1"/>
                    <xs:maxLength value="20"/>
                </xs:restriction>
            </xs:simpleType>

            <xs:complexType name="petBreed">
                <xs:all>
                    <xs:element name="id" type="xs:int"/>

                    <!--
                    Use the 'tns' prefix defined outside the inline schema
                    to test prefix inheritance for inline schemas.
                    -->
                    <xs:element name="name" type="tns:petBreedName"/>
                </xs:all>
            </xs:complexType>
        </xs:schema>
    </types>

    <!-- Abstract interfaces -->
    <interface name="PetInterface">
        <fault name="getPetFault" element="tns:getPetFault"/>

        <operation name="getPetById" pattern="http://www.w3.org/ns/wsdl/in-out">
            <wsoap:operation soapAction="getPetById" style="document"/>
            <!-- no namespace prefix for the element, so fallback to WSDL targetNamespace -->
            <input messageLabel="In" element="getPetByIdRequest"/>
            <output messageLabel="Out" element="tns:getPetByIdResponse"/>
            <!-- no fault defined for operation, so fallback to interface -->
        </operation>

        <operation name="getPetByName" pattern="http://www.w3.org/ns/wsdl/in-out">
            <wsoap:operation soapAction="getPetByName" style="document"/>
            <input messageLabel="In" element="tns:getPetByNameRequest"/>
            <output messageLabel="Out" element="tns:getPetByNameResponse"/>
            <fault name="getPetFault" element="tns:getPetFault"/>
        </operation>
    </interface>

    <!-- Concrete Binding Over HTTP -->
    <binding name="HttpBinding" interface="tns:PetInterface"
             type="http://www.w3.org/ns/wsdl/http">
        <operation ref="tns:getPetById" whttp:method="GET"/>
        <operation ref="tns:getPetByName" whttp:method="GET"/>
    </binding>

    <!-- Concrete Binding with SOAP-->
    <binding name="SoapBinding" interface="tns:PetInterface"
             type="http://www.w3.org/ns/wsdl/soap"
             wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP/"
             wsoap:mepDefault="http://www.w3.org/2003/05/soap/mep/request-response">
        <operation ref="tns:getPetById"/>
        <operation ref="tns:getPetByName"/>
    </binding>

    <!-- Web Service offering endpoints for both bindings-->
    <service name="PetService" interface="tns:PetInterface">
        <endpoint name="HttpEndpoint"
                  binding="tns:HttpBinding"
                  address="http://www.example.com/http/"/>
        <endpoint name="SoapEndpoint"
                  binding="tns:SoapBinding"
                  address="http://www.example.com/soap/"/>
    </service>
</description>
