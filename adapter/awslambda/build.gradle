apply plugin: 'java-library'
apply plugin: 'kotlin'

ext {
    version_junit_jupiter = '5.10.0'
    version_lambda_logger = '1.5.1'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
}

dependencies {
    implementation project (':embedded:embedded-core')
    implementation project (':core:config-resolver-s3')

    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'

    implementation "org.apache.logging.log4j:log4j-api:$version_log4j"
    implementation "org.apache.logging.log4j:log4j-core:$version_log4j"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j18-impl:$version_log4j"
    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:$version_lambda_logger"

    // opinionated implementations
    implementation project (':mock:mock-openapi')
    implementation project (':mock:mock-rest')
    implementation project (':mock:mock-soap')
    implementation project (':scripting:scripting-nashorn')
    implementation project (':store:store-dynamodb')
    implementation project (':store:store-inmem')

    // test
    testImplementation project (':test:test-utils')
    testImplementation 'com.amazonaws:aws-lambda-java-tests:1.1.1'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$version_junit_jupiter"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$version_junit_jupiter"
    testImplementation "org.mockito:mockito-core:$version_mockito"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$version_mockito_kotlin"

    testImplementation "org.testcontainers:testcontainers:$version_testcontainers"
    testImplementation "com.adobe.testing:s3mock-testcontainers:$version_s3mock"

    testImplementation platform ("com.amazonaws:aws-java-sdk-bom:$version_aws_sdk")
    testImplementation 'com.amazonaws:aws-java-sdk-s3'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11

        // see https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces
        freeCompilerArgs = ["-Xjvm-default=all"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11

        // see https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces
        freeCompilerArgs = ["-Xjvm-default=all"]
    }
}

test {
    useJUnitPlatform()
}
